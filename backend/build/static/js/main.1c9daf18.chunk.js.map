{"version":3,"sources":["components/Search.js","components/DataTable.js","components/SearchList.js","utils.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","Form","Group","Control","size","type","className","value","onChange","e","handleChange","target","placeholder","children","Button","variant","onClick","handleSearch","icon","faSearch","DataTable","console","log","Table","striped","bordered","responsive","hover","data","cnpj","nome","logradouro","numero","complemento","municipio","uf","cep","telefone","email","SearchList","ListGroup","map","item","Item","key","id","format_cnpj","replace","format_company_data","origin","RECEITA_URL","RESOURCES","jsonp","require","App","useState","company","setCompany","companyAutoComplete","setCompanyAutoComplete","searchValue","setSearchValue","API","searchApi","a","autoComplete","SEARCH_QUERY","URL","axios","get","then","status","length","catch","err","handleAutoComplete","handleSave","post","headers","res","alert","has_result","message","response","handleSearchList","getAutoCompleteData","getTableData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1c9daf18.chunk.js","sourcesContent":["import React from 'react'\nimport { Form, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Search(props) {          \n    \n    return (\n        <>\n          <Form.Group>\n            <Form.Control size=\"lg\" \n                          type=\"text\" \n                          className=\"input-search\" \n                          value={props.value}                          \n                          onChange={(e) => props.handleChange(e.target.value)}\n                          placeholder=\"Buscar por CNPJ ou Nome (RazÃ£o Social)\" />          \n              <>\n                {props.children}\n              </>\n          </Form.Group>                         \n          <Form.Group>\n           <Button className=\"btn-search\" variant=\"primary\" onClick={props.handleSearch}><FontAwesomeIcon icon={faSearch} /></Button>\n          </Form.Group>  \n        </>\n    )\n}\n","import React from 'react'\nimport { Table } from \"react-bootstrap\";\n\nexport default function DataTable(props) {    \n    console.log(props);\n    return (\n        <div>\n            <Table striped bordered responsive hover>\n                <thead>\n                    <tr>\n                    <td>CNPJ</td>\n                    <td>nome</td>\n                    <td>logradouro</td>\n                    <td>numero</td>\n                    <td>complemento</td>\n                    <td>municipio</td>\n                    <td>uf</td>\n                    <td>cep</td>\n                    <td>telefone</td>\n                    <td>email</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                    <td>{props.data.cnpj}</td>\n                    <td>{props.data.nome}</td>\n                    <td>{props.data.logradouro}</td>\n                    <td>{props.data.numero}</td>\n                    <td>{props.data.complemento}</td>\n                    <td>{props.data.municipio}</td>\n                    <td>{props.data.uf}</td>\n                    <td>{props.data.cep}</td>\n                    <td>{props.data.telefone}</td>\n                    <td>{props.data.email}</td>\n                    </tr>            \n                </tbody>\n            </Table>\n        </div>\n    )\n}\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nexport default function SearchList(props) {\n    \n    const mountList = () => {        \n        return props.data.map( item => <ListGroup.Item className=\"list-item\" onClick={(e) => props.onClick(item.nome)} key={item.id} >{item.nome}</ListGroup.Item>)        \n    }\n\n    return (\n        <div>\n            <ListGroup className=\"list-search\">\n                {mountList()}\n            </ListGroup>\n        </div>\n    )\n}\n","const format_cnpj = (cnpj) => {\n    return cnpj.replace(/[^\\d]+/g,'');\n}\n\nconst format_company_data = (data,origin=\"api\") =>{\n    return {\n        cnpj : format_cnpj(data.cnpj),\n        nome : data.nome,\n        logradouro : data.logradouro,\n        numero : data.numero,\n        complemento : data.complemento,\n        municipio : data.municipio,\n        uf : data.uf,\n        cep : data.cep,\n        telefone : data.telefone,\n        email : data.email,\n        origin : origin\n    }\n}\n\nexport {\n    format_company_data\n}","const RECEITA_URL = `https://www.receitaws.com.br/v1/cnpj/`;\nconst API_URL = `https://teste-crud-cnpj.herokuapp.com/`\n\nconst RESOURCES = {\n    empresa : 'empresa'\n}\n\nexport {\n    RECEITA_URL,    \n    API_URL,\n    RESOURCES,    \n}\n","import React , { useState } from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport DataTable from './components/DataTable';\nimport SearchList from './components/SearchList';\nimport { format_company_data } from './utils';\nimport axios from 'axios';\nimport { API_URL , RECEITA_URL , RESOURCES } from './config';\nimport { Button } from \"react-bootstrap\";\n\nconst jsonp = require('jsonp');\n\nfunction App() {   \n\n  const [company,setCompany] = useState('');\n  const [companyAutoComplete,setCompanyAutoComplete]  = useState('');\n  const [searchValue,setSearchValue] = useState('');\n\n  const API = API_URL+RESOURCES.empresa;\n\n  async function searchApi(autoComplete=false){\n\n    const SEARCH_QUERY = `?q=${searchValue}`;    \n    const URL = API+SEARCH_QUERY;\n\n    return await axios.get(URL).then(({status,data}) => {       \n      if(status === 200){                 \n          if(data.length > 0){                                 \n            (autoComplete)?setCompanyAutoComplete(data):setCompany(data[0]);              \n            return true;\n          }\n\n          return false;\n        }\n      }).catch(err => {\n          console.log(err);\n          return false;\n      });   \n  }\n\n  const handleAutoComplete = () => {\n    if(searchValue  !== \"\"){\n      searchApi(true);      \n    }else{\n      setCompanyAutoComplete('');\n    }\n  }\n\n  const handleSave = () => {\n    \n    axios.post(API,company,\n         {headers: { \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Headers\": \"Authorization\", \n          \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, PATCH, DELETE\" ,\n          \"Content-Type\": \"application/json\"}\n        }).then((res)=>{      \n          console.log(res);\n        if(res.status){\n          alert(res.data);\n        }\n\n    }).catch( err => {\n      console.log(err);\n      alert(\"Erro ao Salvar no Banco de dados\");\n    });\n  }\n\n  async function handleSearch(){    \n            \n      const has_result = await searchApi();\n\n      console.log(has_result);\n      \n      if(has_result === false){\n        alert(\"receita\");\n        await jsonp(RECEITA_URL+searchValue, null, (err, data) => {\n          if (err) {\n            \n          } else {\n            if(data.status === \"ERROR\"){\n              alert(data.message);\n            }else{\n              const response = format_company_data(data,'receita');\n              \n              setCompany(response);\n            }\n          }\n        });\n      }     \n\n      console.log(company);\n  }\n\n  const handleSearchList = (value) => {\n    setSearchValue(value);\n    setCompanyAutoComplete(\"\");\n  }\n\n  const handleChangeSearch = (value) => {    \n    setSearchValue(value);\n    handleAutoComplete(value);    \n\n    if(value === \"\"){\n      setSearchValue('');\n      setCompanyAutoComplete('');\n    }\n  }\n\n  const getAutoCompleteData = () => {        \n    if(companyAutoComplete !== \"\"){      \n      return(<SearchList data={companyAutoComplete} onClick={handleSearchList} />)\n    }\n  }\n\n  const getTableData = () => {\n    if(company !== \"\"){\n      return (<>\n                <DataTable data={company} />\n                <Button className=\"btn-save\" variant=\"success\" onClick={handleSave}>Salvar</Button>\n              </>\n            )\n    }    \n  }\n  \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">    \n        <Search handleSearch={handleSearch} handleChange={handleChangeSearch} value={searchValue} handleAutoComplete={handleAutoComplete} >                \n          {getAutoCompleteData()}\n        </Search>\n      </header>      \n      <section className=\"box-container\">\n        {getTableData()}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}