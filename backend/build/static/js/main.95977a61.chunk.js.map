{"version":3,"sources":["components/Search.js","service/config.js","service/partials/company.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","value","setValue","Form","Group","Control","size","type","className","onChange","e","target","handleAutoComplete","placeholder","Button","variant","onClick","handleSearch","icon","faSearch","RESOURCES","Company","search","SEARCH_QUERY","API","axios","get","then","res","status","data","length","catch","err","console","log","a","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uTAKe,SAASA,EAAOC,GAAQ,IAAD,EACTC,mBAAS,IADA,mBAC3BC,EAD2B,KACrBC,EADqB,KAGlC,OACI,oCACE,kBAACC,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,KACLC,KAAK,OACLC,UAAU,eACVC,SAAU,SAACC,GACDR,EAASQ,EAAEC,OAAOV,OAClBF,EAAMa,mBAAmBF,EAAEC,OAAOV,QAE7CY,YAAY,+CAE3B,kBAACV,EAAA,EAAKC,MAAN,KACC,kBAACU,EAAA,EAAD,CAAQN,UAAU,aAAaO,QAAQ,UAAUC,QAAS,SAACN,GAAD,OAAOX,EAAMkB,aAAahB,KAAQ,kBAAC,IAAD,CAAiBiB,KAAMC,SCrB9H,IAGMC,EACQ,U,iBCDRC,EACG,SAACC,GACF,IAAMC,EAAY,aAASD,GACrBE,EDLD,yCCKeJ,EAAkBG,EAEtCE,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GAChB,GAAkB,MAAfA,EAAIC,OAAe,CAClB,GAAGD,EAAIE,KAAKC,OAAS,EACjB,OAAOH,EAAIE,KAEXL,IAAMC,IDbT,wCCa2BJ,GAAQK,MAAK,SAAAC,GACjC,OAAOA,EAAIE,QACZE,OAAM,SAAAC,GAEL,OADAC,QAAQC,IAAIF,IACL,SAIpBD,OAAM,SAAAC,GAEL,OADAC,QAAQC,IAAIF,IACL,MCjBbhB,EAAY,uCAAG,WAAOK,GAAP,SAAAc,EAAA,sEAEbf,EAAYC,GAAQK,MAAK,SAACC,GAC9BM,QAAQC,IAAIP,MAHK,2CAAH,sDASZhB,EAAqB,SAACU,KAebe,MAVf,WACE,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACV,EAAD,CAAQmB,aAAcA,EAAcL,mBAAoBA,OCZ5C0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.95977a61.chunk.js","sourcesContent":["import React ,  { useState } from 'react'\nimport { Form, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Search(props) {\n    const [value,setValue] = useState('');\n\n    return (\n        <>\n          <Form.Group>\n            <Form.Control size=\"lg\" \n                          type=\"text\" \n                          className=\"input-search\" \n                          onChange={(e) => {\n                                    setValue(e.target.value);\n                                    props.handleAutoComplete(e.target.value)\n                                }} \n                         placeholder=\"Buscar por CNPJ ou Nome (RazÃ£o Social)\" />          \n          </Form.Group>                         \n          <Form.Group>\n           <Button className=\"btn-search\" variant=\"primary\" onClick={(e) => props.handleSearch(value)}><FontAwesomeIcon icon={faSearch} /></Button>\n          </Form.Group>  \n        </>\n    )\n}\n","const RECEITA_URL = `https://www.receitaws.com.br/v1/cnpj/`;\nconst API_URL = `https://teste-crud-cnpj.herokuapp.com/`\n\nconst RESOURCES = {\n    empresa : 'empresa'\n}\n\nexport {\n    RECEITA_URL,    \n    API_URL,\n    RESOURCES,    \n}\n","import { API_URL , RECEITA_URL , RESOURCES } from '../config';\nimport axios from 'axios';\n\nconst Company = {    \n    get: (search) => {            \n        const SEARCH_QUERY = `?q=${search}`;\n        const API = API_URL+RESOURCES.empresa+SEARCH_QUERY;\n\n        axios.get(API).then(res => {\n            if(res.status === 200){\n                if(res.data.length > 0){\n                    return res.data;\n                }else{\n                    axios.get(RECEITA_URL + search).then(res => {                        \n                        return res.data;\n                    }).catch(err => {\n                        console.log(err);\n                        return false;\n                    });\n                }\n            }\n        }).catch(err => {\n            console.log(err);\n            return false;\n        });                 \n    }    \n}\n\n\nexport {\n    Company\n};","import React from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport { Company } from './service';\n\n\nconst handleSearch = async (search) => {  \n\n  await Company.get(search).then((res) => {\n    console.log(res);\n  });\n  //alert(\"teste\");\n  //alert(search)\n}\n\nconst handleAutoComplete = (search) => {\n  //alert(\"testeAuto\")\n  //alert(search)\n}\n\nfunction App() {    \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">    \n        <Search handleSearch={handleSearch} handleAutoComplete={handleAutoComplete} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}